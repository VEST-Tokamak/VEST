from omas import *
from omfit_classes.omfit_eqdsk import OMFITgeqdsk
import numpy as np
import sys
import matplotlib.pyplot as plt
from scipy.io import netcdf
    
def plotC(name):
    gname='g'+name
    mname='m'+name+'.nc'
    mfile= netcdf.NetCDFFile(mname,'r')

    # the g-file contains the 2D Psi
    gfile=OMFITgeqdsk(gname)
    ods=gfile.to_omas()

    RBBBS=gfile['RBBBS']
    ZBBBS=gfile['ZBBBS']

    # Psi
    ZSI= [0.685, 0.46, -0.46, -0.685, -0.805, 0.04, 0.805, 0.696, 0.62, -0.696, -0.62]

    COILS_exp=mfile.variables['silopt'][:][0]
    COILS_rec=mfile.variables['csilop'][:][0]
    FWTSI=mfile.variables['fwtsi'][:][0]
    Psioute=0.
    Psioutexp=[]
    Psioutrec=[]
    Psiouty=[]
    PsioutW=0.
    for i in range(4):
        if FWTSI[i]:
            Psioute=Psioute+abs((COILS_exp[i]-COILS_rec[i])/COILS_exp[i])*100.
            Psioutexp.append(COILS_exp[i])
            Psioutrec.append(COILS_rec[i])
            Psiouty.append(ZSI[i])
            PsioutW=PsioutW+FWTSI[i]

    Psioute=Psioute/len(Psioutexp)
    PsioutW=PsioutW/len(Psioutexp)
            
    Psiine=0.
    Psiinexp=[]
    Psiinrec=[]
    Psiiny=[]
    PsiinW=0.
    for i in range(4,11):
        if FWTSI[i]:
            Psiine=Psiine+abs((COILS_exp[i]-COILS_rec[i])/COILS_exp[i])*100.
            Psiinexp.append(COILS_exp[i])
            Psiinrec.append(COILS_rec[i])
            Psiiny.append(ZSI[i])
            PsiinW=PsiinW+FWTSI[i]
    Psiine=Psiine/len(Psiinexp)
    PsiinW=PsiinW/len(Psiinexp)
    
    # Bz
    # There is a problem with the a-eqdsk file generated by EFIT (in my version at least). Need to remove the test      if (ishot.lt.91000) then at line 150 of write_a.f90
    ZMP2 = [0.54, 0.5, 0.46, 0.42, 0.38, 0.34, 0.3, 0.26, 0.22, 0.16, 0.12, 0.08, 0.04, 0.0, -0.04, -0.08, -0.12, -0.16, -0.22, -0.26, -0.3, -0.34, -0.38, -0.42 ,-0.46, -0.5, -0.54,0.42, 0.38, 0.34, 0.3, 0.26, 0.22, 0.18, 0.1, 0.06, 0.02, -0.02, -0.06, -0.1, -0.14, -0.18,-0.22, -0.26, -0.3, -0.34, -0.38, -0.42, 0.8328, 0.8728, 0.9128, 0.9528, 0.9928, 1.0328,1.0728, 1.1128, -0.8328, -0.8728, -0.9128, -0.9528, -0.9928, -1.0328, -1.0728,-1.1128]

    EXPMP2_exp=mfile.variables['expmpi'][:][0]
    EXPMP2_rec=mfile.variables['cmpr2'][:][0]
    FWTMP2=mfile.variables['fwtmp2'][:][0]
    intBz=0.
    if len(EXPMP2_exp) > 64:
        intBz=1

    Bzine=0.
    Bzinexp=[]
    Bzinrec=[]
    Bziny=[]
    BzinW=0.
    for i in range(27):
        if FWTMP2[i]:
            Bzine=Bzine+abs((EXPMP2_exp[i]-EXPMP2_rec[i])/EXPMP2_exp[i])*100.
            Bzinexp.append(EXPMP2_exp[i])
            Bzinrec.append(EXPMP2_rec[i])
            Bziny.append(ZMP2[i])
            BzinW=BzinW+FWTMP2[i]
    Bzine=Bzine/len(Bzinexp)
    BzinW=BzinW/len(Bzinexp)
    
    Bzoute=0.
    Bzoutexp=[]
    Bzoutrec=[]
    Bzouty=[]
    BzoutW=0.
    for i in range(27,48):
        if FWTMP2[i]:
            Bzoute=Bzoute+abs((EXPMP2_exp[i]-EXPMP2_rec[i])/EXPMP2_exp[i])*100.
            Bzoutexp.append(EXPMP2_exp[i])
            Bzoutrec.append(EXPMP2_rec[i])
            Bzouty.append(ZMP2[i])
            BzoutW= BzoutW+FWTMP2[i]
    Bzoute=Bzoute/len(Bzoutexp)
    BzoutW=BzoutW/len(Bzoutexp)
    
    Bzsidee=0.
    Bzsideexp=[]
    Bzsiderec=[]
    Bzsidey=[]
    BzsideW=0.
    for i in range(48,64):
        if FWTMP2[i]:
            Bzsidee=Bzsidee+abs((EXPMP2_exp[i]-EXPMP2_rec[i])/EXPMP2_exp[i])*100.
            Bzsideexp.append(EXPMP2_exp[i])
            Bzsiderec.append(EXPMP2_rec[i])
            Bzsidey.append(ZMP2[i])
            BzsideW=BzsideW+FWTMP2[i]
    Bzsidee=Bzsidee/len(Bzsideexp)
    BzsideW=BzsideW/len(Bzsideexp)


    Bzinte=0.
    BzintW=0.
    if intBz==1:
        Bzintexp=[]
        Bzintrec=[]
        Bzinty=[]
        R0=0.245
        dR=0.025

        for i in range(64,80):
            if FWTMP2[i]:
                Bzinte=Bzinte+abs((EXPMP2_exp[i]-EXPMP2_rec[i])/EXPMP2_exp[i])*100.
                Bzintexp.append(EXPMP2_exp[i])
                Bzintrec.append(EXPMP2_rec[i])
                Bzinty.append(R0+(i-64)*dR)
                BzintW=BzintW+FWTMP2[i]
        Bzinte=Bzinte/len(Bzintexp)
        BzintW=BzintW/len(Bzintexp)

        
    PLASMA_exp=mfile.variables['plasma'][0]
    FWTCUR=mfile.variables['fwtcur'][0]
    PLASMA_rec=mfile.variables['cpasma'][0]
    Ipe=abs((PLASMA_exp-PLASMA_rec)/PLASMA_exp)*100.
    IpW=FWTCUR
    
    BRSP_exp=mfile.variables['fccurt'][:][0]
    FWTFC=mfile.variables['fwtfc'][:][0]
    BRSP_rec=mfile.variables['ccbrsp'][:][0]
    Ipfe=0.
    Ipfexp=[]
    Ipfrec=[]
    Ipfy=[]
    IpfW=0.
    for i in range(len(BRSP_exp)):
        Ipfe=Ipfe+abs((BRSP_exp[i]-BRSP_rec[i])/BRSP_exp[i])*100.
        Ipfexp.append(BRSP_exp[i])
        Ipfrec.append(BRSP_rec[i])
        Ipfy.append(i)
        IpfW=IpfW+FWTFC[i]
    Ipfe=Ipfe/len(BRSP_exp)
    IpfW=IpfW/len(BRSP_exp)
    
    DFLUX_exp=mfile.variables['diamag'][0]
    FWTDLC=mfile.variables['fwtdlc'][0]
    DFLUX_rec=mfile.variables['cdflux'][0]
    Dfluxe=abs((DFLUX_exp-DFLUX_rec)/DFLUX_exp)*100.
    DfluxW=FWTDLC
    
    EQ=ods['equilibrium']
    xvar=EQ['time_slice.0.profiles_2d.0.grid.dim1']
    zvar=EQ['time_slice.0.profiles_2d.0.grid.dim2']
    psi=EQ['time_slice.0.profiles_2d.0.psi']

    mfile.close()
    
    f=open(f'result_{name}.dat','w')
    f.write('Exp.\t\t\tRec.\t\t\tErr.[%]\t\tWeight\n')
    f.write('Psi [WB/rad]\n')
    for i in range(len(COILS_exp)):
        if FWTSI[i]:
            err=abs((COILS_exp[i]-COILS_rec[i])/COILS_exp[i])*100.
            f.write(f'{COILS_exp[i]:.11f}\t\t{COILS_rec[i]:.11f}\t\t{err:.2f}\t\t{FWTSI[i]:.3e}\n')
        else:
            f.write(f'{0:.11f}\t\t{0:.11f}\t\t{0.:.2f}\t\t{0:.3e}\n')
            
    f.write('Bz [T]:\n')
    for i in range(len(EXPMP2_exp)):
        if FWTMP2[i]:
            err=abs((EXPMP2_exp[i]-EXPMP2_rec[i])/EXPMP2_exp[i])*100.
            f.write(f'{EXPMP2_exp[i]:.11f}\t\t{EXPMP2_rec[i]:.11f}\t\t{err:.2f}\t\t{FWTMP2[i]:.3e}\n')
        else:
            f.write(f'{0:.11f}\t\t{0:.11f}\t\t{0.:.2f}\t\t{0:.3e}\n')

    f.write('Ip [A]:\n')
    f.write(f'{PLASMA_exp:.7f}\t\t{PLASMA_rec:.7f}\t\t{Ipe:.2f}\t\t{FWTCUR:.3e}\n')

    f.write('Ipf [A]:\n')
    for i in range(len(BRSP_exp)):
        err=abs((BRSP_exp[i]-BRSP_rec[i])/BRSP_exp[i])*100.
        f.write(f'{BRSP_exp[i]:.7f}\t\t{BRSP_rec[i]:.7f}\t\t{err:.2f}\t\t{FWTFC[i]:.3e}\n')

    f.write('Diamag. Flux [mWb]:\n')
    if FWTDLC:
        f.write(f'{DFLUX_exp:.11f}\t\t{DFLUX_rec:.11f}\t\t{Dfluxe:.2f}\t\t{FWTDLC:.3e}\n')
    else:
        f.write(f'{0.:.11f}\t\t{0.:.11f}\t\t{0.:.2f}\t\t{0.:.3e}\n')

        
    f.close()

    t1 = np.arange(0.0, 3.0, 0.01)
    f1 = np.arange(0.0, 3.0, 0.01)

    fig = plt.figure(figsize=(10,8))
    fig.suptitle(name, fontsize=16)
#    ax = fig.add_subplot()
#    fig.subplots_adjust(top=0.85)
#    ax.axis([0, 10, 0, 10])
#    ax.text(1,2, 'Experimental data',color='blue', fontsize=15)
    
    ax1 = plt.subplot2grid((5, 3), (0, 0))
    ax2 = plt.subplot2grid((5, 3), (0, 1))
    ax3 = plt.subplot2grid((5, 3), (2, 0))
    ax4 = plt.subplot2grid((5, 3), (2, 1))
    ax5 = plt.subplot2grid((5, 3), (4, 0))
    ax6 = plt.subplot2grid((5, 3), (4, 1))
    ax7 = plt.subplot2grid((5, 3), (0, 2), rowspan=3)
    ax8 = plt.subplot2grid((5, 3), (4, 2))

    ax9 = plt.subplot2grid((5, 3), (1, 0))
    ax9.axis('off')
    ax10 = plt.subplot2grid((5, 3), (3, 1))
    ax10.axis('off')
    ax11 = plt.subplot2grid((5, 3), (3, 2))
    ax11.axis('off')

    ax9.text(0,0.6,'Experimental data',color='blue', fontsize=15)
    ax9.text(0,0.4,'Reconstructed data',color='orange', fontsize=15)
    ax10.text(0,0.6,f'Dflux exp.:{DFLUX_exp/1000.:.4e} Wb - W:{DfluxW:.2e}',color='blue', fontsize=10)
    ax10.text(0,0.4,f'Dflux rec.:{DFLUX_rec/1000.:.4e} Wb',color='orange', fontsize=10)
    ax10.text(0,0.2,f'Dflux err.:{Dfluxe:.2f} %', fontsize=10)
    ax11.text(0,0.6,f'Ip exp.:{PLASMA_exp:.4f} A - W:{IpW:.2e}',color='blue', fontsize=10)
    ax11.text(0,0.4,f'Ip rec.:{PLASMA_rec:.4f} A',color='orange', fontsize=10)
    ax11.text(0,0.2,f'Ip err.:{Ipe:.2f} %', fontsize=10)
#    ax9.text(0,0.6,'Reconstructed data',color='orange', fontsize=15)
    
    ax1.scatter(Bziny, Bzinexp,color='blue')
    ax1.scatter(Bziny, Bzinrec,color='orange')
    ax1.set_title(f'Bz in [T] - err: {Bzine:.2f} % - W:{BzinW:.2e}', fontsize=10)
    ax1.set_ylim([0,np.max(Bzinrec)*1.2])

    ax2.scatter(Bzsidey, Bzsideexp,color='blue')
    ax2.scatter(Bzsidey, Bzsiderec,color='orange')
    ax2.set_title(f'Bz side [T] - err: {Bzsidee:.2f} % - W:{BzsideW:.2e}', fontsize=10)
    ax2.set_ylim([np.min(Bzsideexp)*1.2,np.max(Bzsideexp)*1.2])

    ax3.scatter(Bzouty, Bzoutexp,color='blue')
    ax3.scatter(Bzouty, Bzoutrec,color='orange')
    ax3.set_title(f'Bz out [T] - err: {Bzoute:.2f} % - W:{BzoutW:.2e}', fontsize=10)
    ax3.set_ylim([np.min(Bzoutexp)*1.2,0])

    if intBz==1:
        ax4.scatter(Bzinty, Bzintexp,color='blue')
        ax4.scatter(Bzinty, Bzintrec,color='orange')
        ax4.set_title(f'int. Bz [T]- err: {Bzinte:.2f} % - W:{BzintW:.2e}', fontsize=10)
    else:
        ax4.set_title(' no internal Bz', fontsize=10)

    ax5.scatter(Psiiny, Psiinexp,color='blue')
    ax5.scatter(Psiiny, Psiinrec,color='orange')
    ax5.set_ylim([np.min(Psiinexp)*1.2,0])
    ax5.set_title(f'Psi in [Wb/rad] - err: {Psiine:.2f} % - W:{PsiinW:.2e}', fontsize=9)

    ax6.scatter(Psiouty, Psioutexp,color='blue')
    ax6.scatter(Psiouty, Psioutrec,color='orange')
    ax6.set_ylim([np.min(Psioutexp)*1.2,0])
    ax6.set_title(f'Psi out [Wb/rad] - err: {Psioute:.2f} % - W:{PsioutW:.2e}', fontsize=9)

    ax8.scatter(Ipfy, Ipfexp,color='blue')
    ax8.scatter(Ipfy, Ipfrec,color='orange')
    ax8.set_title(f'Ipf [A] - err: {Ipfe:.2f} % - W:{IpfW:.2e}', fontsize=9)

    ax7.contour(xvar,zvar,psi.T)
    ax7.plot(RBBBS,ZBBBS,color='red')
    ax7.set_title(f'Psi')
    ax7.set_ylim([-1,1])
    ax7.set_xlim([0,1.25])

    plt.savefig(f'{name}.png')
    print(f'result_{name}.dat generated')
    print(f'{name}.png generated')
    
    #display plots
    plt.show()
        
        
if __name__ == "__main__":
    argv=sys.argv[1:]
    name=argv[0]

    plotC(name)
